// Copyright (C) 2015-2020 the Gprovision Authors. All Rights Reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
//
// SPDX-License-Identifier: BSD-3-Clause
//

package networkd

/*
This file pulls in github.com/purecloudlabs/gprovision/pkg/appliance, which is linux-specific thanks to various dependencies.
Go treats the _linux suffix specially - as a result, it doesn't try to compile this for windows.
*/

import (
	"fmt"

	"github.com/purecloudlabs/gprovision/pkg/appliance"
	"github.com/purecloudlabs/gprovision/pkg/hw/nic"
	"github.com/purecloudlabs/gprovision/pkg/log"
	nx "github.com/purecloudlabs/gprovision/pkg/netexport"
)

// Defaults creates a set of config files with platform default names, DHCP, and current device's MACs.
// Must be called before any diag ports are disabled.
func Defaults(platform *appliance.Variant) (ifaces nx.IfMap) {
	nics := nic.SortedList(platform.MACPrefixes())
	return defaults(nics, platform)
}
func defaults(sortedNics []nic.Nic, platform *appliance.Variant) (ifaces nx.IfMap) {
	comment := "default generated by factory restore"
	ifaces = nx.NewIfMap()
	diags := platform.DiagPorts()
	portNames := platform.DefaultPortNames()
	nameIdx := 0
outer:
	for idx, iface := range sortedNics {
		add := func(alias string, diag bool) {
			ifinfo := new(nx.WinNic)
			ifinfo.Mac.HardwareAddr = iface.Mac()
			ifinfo.FriendlyName = alias
			ifinfo.DHCP4 = !diag //do not configure DHCP for diag ports
			ifinfo.DHCP6 = !diag
			ifinfo.WinName = comment //WinName is inserted as a comment in the generated files
			ifaces[idx] = ifinfo
		}
		for _, d := range diags {
			if d == idx {
				//diag port
				if len(diags) > 1 {
					add(fmt.Sprintf("DIAG%d", d), true)
				} else {
					add("DIAG", true)
				}
				continue outer
			}
		}
		if nameIdx >= len(portNames) {
			log.Logf("wrong hardware or %s needs updated in appliance.json; no name for port #%d", platform.DeviceCodeName(), nameIdx)
			add(fmt.Sprintf("%d", nameIdx), false)
		} else {
			add(portNames[nameIdx], false)
			nameIdx++
		}
	}
	return
}
