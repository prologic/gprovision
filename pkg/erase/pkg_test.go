// Copyright (C) 2015-2020 the Gprovision Authors. All Rights Reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
//
// SPDX-License-Identifier: BSD-3-Clause
//

package erase

import (
	"testing"
	"time"

	"github.com/purecloudlabs/gprovision/pkg/log"
	"github.com/purecloudlabs/gprovision/pkg/log/flags"
)

//func getSEtime(info []byte, enhanced bool) (t time.Duration)
func TestReadSETime(t *testing.T) {
	seData := []byte{
		0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x20, 0x0a, 0x09, 0x4d, 0x61, 0x73, 0x74,
		0x65, 0x72, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x72, 0x65, 0x76, 0x69,
		0x73, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x3d, 0x20, 0x36, 0x35, 0x35, 0x33,
		0x34, 0x0a, 0x09, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x0a, 0x09, 0x6e,
		0x6f, 0x74, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x09,
		0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x09, 0x66, 0x72, 0x6f, 0x7a,
		0x65, 0x6e, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x3a,
		0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x0a,
		0x09, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x3a, 0x20, 0x65, 0x6e, 0x68,
		0x61, 0x6e, 0x63, 0x65, 0x64, 0x20, 0x65, 0x72, 0x61, 0x73, 0x65, 0x0a, 0x09, 0x32, 0x37, 0x34,
		0x6d, 0x69, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
		0x20, 0x45, 0x52, 0x41, 0x53, 0x45, 0x20, 0x55, 0x4e, 0x49, 0x54, 0x2e, 0x20, 0x35, 0x38, 0x36,
		0x6d, 0x69, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x45, 0x4e, 0x48, 0x41, 0x4e, 0x43, 0x45, 0x44,
		0x20, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x20, 0x45, 0x52, 0x41, 0x53, 0x45, 0x20,
		0x55, 0x4e, 0x49, 0x54, 0x2e, 0x20, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x55,
		0x6e, 0x69, 0x74, 0x20, 0x57, 0x57, 0x4e, 0x20, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x49,
		0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x31, 0x34,
		0x65, 0x65, 0x30, 0x30, 0x33, 0x61, 0x34, 0x62, 0x34, 0x35, 0x37, 0x0a, 0x09, 0x4e, 0x41, 0x41,
		0x09, 0x09, 0x3a, 0x20, 0x35, 0x0a, 0x09, 0x49, 0x45, 0x45, 0x45, 0x20, 0x4f, 0x55, 0x49, 0x09,
		0x3a, 0x20, 0x30, 0x30, 0x31, 0x34, 0x65, 0x65, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
		0x20, 0x49, 0x44, 0x09, 0x3a, 0x20, 0x30, 0x30, 0x33, 0x61, 0x34, 0x62, 0x34, 0x35, 0x37, 0x0a,
		0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x3a, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
		0x74, 0x0a,
	}
	log.AddConsoleLog(flags.NA)

	d := getSEtime(seData, false)
	e := getSEtime(seData, true)
	if d != 274*time.Minute {
		t.Errorf("non-enhanced: want 274 minutes, got %d (exact:%s)", d/time.Minute, d)
	}
	if e != 586*time.Minute {
		t.Errorf("enhanced: want 586 minutes, got %d (exact:%s)", e/time.Minute, e)
	}
}
